---
title: "vignette-images"
format: html
editor: visual
---

# Image Classification with CNN

## Data

Worldwide 300,000 people are diagnosed with brain tumors annually with nearly one-third of these cases being cancerous. These characteristics immediately make brain tumors a pressing issue, however brain tumors are very diverse. In our case, we will be dealing with the three most common types, glioma, meningioma, and pituitary.

```{r}
library(keras3)
library(tensorflow)

batch_size <- 32
img_height <- 256
img_width <- 256
#increases resolution, helps model generalize

# Define class names
class_names <- c('notumor', 'pituitary', 'meningioma', 'glioma')

# Normalizes pixel values to [0,1]
train_gen <- image_data_generator(rescale = 1/255, validation_split = 0.2)  # Include validation split
test_gen <- image_data_generator(rescale = 1/255)

#validation splits helps with over fitting, noticed the model before the split had a high accuracy 
# but low validation accuracy which told us the model was overfitting.

# Train dataset (80% of the training data)
train_tumor <- flow_images_from_directory( #loads and processes images from directory
  directory = "data/Training",
  generator = train_gen,
  target_size = c(img_height, img_width),
  batch_size = batch_size,
  class_mode = "categorical",
  subset = "training",  # Specify training subset
  seed = 1111
)

# Validation dataset (20% of the training data)
validation_tumor <- flow_images_from_directory(
  directory = "data/Training",
  generator = train_gen,
  target_size = c(img_height, img_width),
  batch_size = batch_size,
  class_mode = "categorical",
  subset = "validation",  # Specify validation subset, loads 20% for validation
  seed = 1111
)

# Test dataset, no splits
test_tumor <- flow_images_from_directory(
  directory = "data/Testing",
  generator = test_gen,
  target_size = c(img_height, img_width),
  batch_size = batch_size,
  class_mode = "categorical"
)
```

## Single Layer Model

First test out the most simple neural network, which is just a single layer. Since the data is a 3 dimensional matrix of numbers, we need to flatten it 

### Define model architecture
```{r}
model_single_layer <- keras_model_sequential(input_shape = c(img_height, img_width, 3)) %>%
  layer_flatten() %>%
  layer_dense(length(class_names)) %>%
  layer_activation(activation = 'softmax')

summary(model_single_layer)
```

### Compile model
```{r}
model_single_layer %>% compile(
  optimizer = 'adam',
  loss = 'crossentropy',
  metrics = 'accuracy'
)
```

### Train model
```{r}
history_single_layer <- model_single_layer %>% fit(
  train_tumor,
  validation_data = validation_tumor,
  epochs = 20
)
```








